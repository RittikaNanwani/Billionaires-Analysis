# -*- coding: utf-8 -*-
"""Billionaires Analysis â€” Exploratory Data Analysis (EDA) .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0MoRarphEkpAE6wVfzuWBkopvvQOYY3

# Importing packages
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Reading dataset"""

df=pd.read_csv("Billionaire.csv")

#No. of rows and columns
df.shape

#displaying first five rows of data
df.head()

#Checking if any null values present 
df.isnull().any()

#Filling "Age" column with mean
df['Age'].fillna(df['Age'].mean(), inplace=True)

df.isnull().any()

#Removing this signs $ and B ,converting the Net Worth column to float.


df['NetWorth'] = df['NetWorth'].astype(str).str.replace('$', '').str.replace('B', '').astype(float)

# Display the modified DataFrame
print(df)

#checking dataset
df

"""Displaying top 10 billionaires according to their Net Worth"""

import pandas as pd
import matplotlib.pyplot as plt

# Sorting the DataFrame by Net Worth in descending order and select the top 10
top_10_billionaires = df.sort_values(by='NetWorth', ascending=False).head(10)

# Reverse the order of the DataFrame to display highest net worth at the top
top_10_billionaires = top_10_billionaires.iloc[::-1]

# Define custom colors for the bars
colors = ['steelblue', 'darkorange', 'mediumseagreen', 'purple', 'gold', 'cornflowerblue', 'indianred', 'teal', 'salmon', 'mediumslateblue']

# Create a horizontal bar chart with custom colors
plt.figure(figsize=(10, 6))
plt.barh(top_10_billionaires['Name'], top_10_billionaires['NetWorth'], color=colors, align='center')

plt.title('Top 10 Billionaires by NetWorth', fontsize=16)
plt.xlabel('NetWorth (in billions)', fontsize=12)
plt.ylabel('Name', fontsize=10)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

plt.tight_layout()
plt.show()

"""Displaying top 5 Industry with the most number of billionaires."""

import pandas as pd
import matplotlib.pyplot as plt

# Counting the number of billionaires in each industry
industry_counts = df['Industry'].value_counts()

# Get the top 5 industries with the most number of billionaires
top_5_industries = industry_counts.head(5)

# Create a new DataFrame with the industry names and their corresponding counts
top_5_industries_df = pd.DataFrame({'Industry': top_5_industries.index, 'Number of Billionaires': top_5_industries.values})

# Display the top 5 industries with the most number of billionaires
print(top_5_industries_df)

# Plotting the top 5 industries
plt.figure(figsize=(10, 6))
plt.bar(top_5_industries_df['Industry'], top_5_industries_df['Number of Billionaires'], color=['#006400', '#808000', '#228B22', '#32CD32', '#90EE90'])

plt.title('Top 5 Industries with the Most Number of Billionaires', fontsize=16)
plt.xlabel('Industry', fontsize=12)
plt.ylabel('Number of Billionaires', fontsize=12)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.yticks(fontsize=10)

# Add value labels on top of each bar
for i, v in enumerate(top_5_industries_df['Number of Billionaires']):
    plt.text(i, v + 0.5, str(v), ha='center', fontsize=10)

plt.tight_layout()
plt.show()

"""Display top 5 countries with the most number of billionaires."""

import pandas as pd
import matplotlib.pyplot as plt

# Counting the number of billionaires in each country
country_counts = df['Country'].value_counts()

# Get the top 5 countries with the most number of billionaires
top_5_countries = country_counts.head(5)

# Create a new DataFrame with the country names and their corresponding counts
top_5_countries_df = pd.DataFrame({'Country': top_5_countries.index, 'Number of Billionaires': top_5_countries.values})

# Display the top 5 countries with the most number of billionaires
print(top_5_countries_df)

# Plot a pie chart for the top 5 countries
custom_colors = ["skyblue", "yellowgreen", "tomato", "purple", "red"]

plt.figure(figsize=(6, 6))
plt.pie(top_5_countries, labels=top_5_countries.index, colors=custom_colors, autopct='%1.1f%%')
plt.title('Top 5 Countries with the Most Number of Billionaires')

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.show()

#converting file to csv
df.to_csv('Final_Billionaire.csv',index=False)